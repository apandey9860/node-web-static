CREATE ROLE admin WITH
    LOGIN
    SUPERUSER
    CREATEDB
    CREATEROLE
    INHERIT
    NOREPLICATION
    CONNECTION LIMIT -1
    PASSWORD 'tooshort';

CREATE ROLE "Viewer" WITH
	LOGIN
	NOSUPERUSER
	NOCREATEDB
	NOCREATEROLE
	INHERIT
	NOREPLICATION
	CONNECTION LIMIT -1
	PASSWORD 'tooshort';

CREATE ROLE "Customer" WITH
	LOGIN
	NOSUPERUSER
	NOCREATEDB
	NOCREATEROLE
	INHERIT
	NOREPLICATION
	CONNECTION LIMIT -1
	PASSWORD 'tooshort';
    
-- Database: EERO

-- DROP DATABASE IF EXISTS "EERO";

CREATE DATABASE "EERO"
    WITH
    OWNER = admin
    ENCODING = 'UTF8'
    LC_COLLATE = 'English_United States.1252'
    LC_CTYPE = 'English_United States.1252'
    LOCALE_PROVIDER = 'libc'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;

-- Connect to the newly created database
\c "EERO" admin;
--tooshort

CREATE SCHEMA PERSON
    AUTHORIZATION admin;

CREATE SCHEMA TRADE
    AUTHORIZATION admin;

CREATE SCHEMA REPAIR
    AUTHORIZATION admin;  

CREATE SCHEMA MISC
    AUTHORIZATION admin;    

CREATE SCHEMA REPAIR
    AUTHORIZATION admin;  

CREATE SCHEMA INVENTORY
    AUTHORIZATION admin;  

DROP SCHEMA public CASCADE;

-- Create a table to store user access levels and descriptions
CREATE TABLE PERSON.USER_ACCESS (
    USER_ACCESS_ID SERIAL PRIMARY KEY,
    USER_ACCESS_LEVEL VARCHAR(200) NOT NULL,
    USER_ACCESS_DESCRIPTION VARCHAR(200)
);

INSERT INTO PERSON.USER_ACCESS (USER_ACCESS_LEVEL, USER_ACCESS_DESCRIPTION) VALUES
    (1, 'Viewer', 'Can View Website'),
    (2, 'Customer', 'Can use buy or repair services'),
    (3, 'Admin','All privilege and can create other users');

-- Create a table to store user information including hashed passwords
CREATE TABLE PERSON.USERS (
    USER_ID SERIAL PRIMARY KEY,
    USER_NAME VARCHAR(100) NOT NULL,
    USER_PASSWORD TEXT NOT NULL,
    USER_PHONE VARCHAR(50) NOT NULL,
    USER_EMAIL VARCHAR(50) NOT NULL,
    USER_ADDRESS VARCHAR(100) NOT NULL,
    USER_ACCESS_ID INT NOT NULL,
    CREATION_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    LAST_UPDATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_user_access FOREIGN KEY (USER_ACCESS_ID) REFERENCES PERSON.USER_ACCESS(USER_ACCESS_ID)
);

-- Create a table to log events associated with user actions
CREATE TABLE MISC.EVENT_LOG (
    EVENT_LOG_ID SERIAL PRIMARY KEY,
    USER_ID INT,
    ACTION_DONE TEXT NOT NULL,
    EVENT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES PERSON.USERS(USER_ID)
);